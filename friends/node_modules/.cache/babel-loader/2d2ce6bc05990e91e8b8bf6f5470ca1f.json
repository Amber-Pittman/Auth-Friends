{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\amber\\\\Desktop\\\\Lambda-School\\\\Web-Applications-II\\\\Auth-Friends\\\\friends\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\amber\\\\Desktop\\\\Lambda-School\\\\Web-Applications-II\\\\Auth-Friends\\\\friends\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\amber\\\\Desktop\\\\Lambda-School\\\\Web-Applications-II\\\\Auth-Friends\\\\friends\\\\src\\\\components\\\\Signin.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// #11 Import useState\nimport React, { useState } from \"react\"; // #24 Instead of importing axios, we'll import api, axios can be removed\n\nimport api from \"../utils/api\"; // #6 Create Signin Component\n\nfunction Signin(props) {\n  // #20 Set up error state for error component/message\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        error = _useState2[0],\n        setError = _useState2[1]; // #12 Set up some initial state\n\n\n  const _useState3 = useState({\n    username: \"\",\n    password: \"\"\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        data = _useState4[0],\n        setData = _useState4[1]; // #13 Create handleChange function for the inputs\n\n\n  const handleChange = event => {\n    // #14 set new state\n    setData(_objectSpread({}, data, {\n      // #17 Pass in new value\n      [event.target.name]: event.target.value\n    }));\n  }; // #22 We need a handle submit function for our button.\n\n\n  const handleSubmit = event => {\n    event.preventDefault(); // #23 We need to make an axios call. \n    //     Instead of calling axios post, we'll use api as a function in place of axios\n    // We are using are axios instance with predefined values,\n    // rather than just plain old axios\n\n    api().post(\"/login\", data).then(result => {\n      // #26 Store our new token in local storage so it persists\n      localStorage.setItem(\"token\", result.data.token); // #57 Redirect the user to their account page after logging in\n\n      props.history.push(\"/account\");\n    }).catch(err => {\n      setError(err.response.data.message);\n    });\n  };\n\n  return (// #9 Return a form tag\n    // #25 Don't forget to add handleSubmit to the form!\n    React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, error && React.createElement(\"div\", {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, error), React.createElement(\"input\", {\n      type: \"text\",\n      autoComplete: \"username\",\n      name: \"username\",\n      placeholder: \"Username\" // #18A Attach these values and the handleChange function to \n      //    each one of our inputs\n      ,\n      value: data.username,\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"password\",\n      autoComplete: \"current-password\",\n      name: \"password\",\n      placeholder: \"Password\" // #18B Attach these values and the handleChange function to \n      //    each one of our inputs\n      ,\n      value: data.password,\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Sign In\"))\n  );\n}\n\nexport default Signin;","map":{"version":3,"sources":["C:/Users/amber/Desktop/Lambda-School/Web-Applications-II/Auth-Friends/friends/src/components/Signin.js"],"names":["React","useState","api","Signin","props","error","setError","username","password","data","setData","handleChange","event","target","name","value","handleSubmit","preventDefault","post","then","result","localStorage","setItem","token","history","push","catch","err","response","message"],"mappings":";;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;;AACA,OAAOC,GAAP,MAAgB,cAAhB,C,CAEA;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACnB;AADmB,oBAEOH,QAAQ,EAFf;AAAA;AAAA,QAEZI,KAFY;AAAA,QAELC,QAFK,kBAInB;;;AAJmB,qBAKKL,QAAQ,CAAC;AAC7BM,IAAAA,QAAQ,EAAE,EADmB;AAE7BC,IAAAA,QAAQ,EAAE;AAFmB,GAAD,CALb;AAAA;AAAA,QAKZC,IALY;AAAA,QAKNC,OALM,kBAUnB;;;AACA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC5B;AACAF,IAAAA,OAAO,mBAEAD,IAFA;AAGH;AACA,OAACG,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE;AAJ/B,OAAP;AAMH,GARD,CAXmB,CAqBnB;;;AACA,QAAMC,YAAY,GAAIJ,KAAD,IAAW;AAC5BA,IAAAA,KAAK,CAACK,cAAN,GAD4B,CAG5B;AACA;AACQ;AACA;;AACRf,IAAAA,GAAG,GACEgB,IADL,CACU,QADV,EACoBT,IADpB,EAEKU,IAFL,CAEUC,MAAM,IAAI;AACZ;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,MAAM,CAACX,IAAP,CAAYc,KAA1C,EAFY,CAGZ;;AACAnB,MAAAA,KAAK,CAACoB,OAAN,CAAcC,IAAd,CAAmB,UAAnB;AACH,KAPL,EAQKC,KARL,CAQWC,GAAG,IAAI;AACVrB,MAAAA,QAAQ,CAACqB,GAAG,CAACC,QAAJ,CAAanB,IAAb,CAAkBoB,OAAnB,CAAR;AACH,KAVL;AAWC,GAlBL;;AAoBI,SACI;AACA;AACA;AAAM,MAAA,QAAQ,EAAEb,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIKX,KAAK,IAAI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwBA,KAAxB,CAJd,EAOI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,YAAY,EAAC,UAFjB;AAGI,MAAA,IAAI,EAAC,UAHT;AAII,MAAA,WAAW,EAAC,UAJhB,CAKI;AACA;AANJ;AAOI,MAAA,KAAK,EAAEI,IAAI,CAACF,QAPhB;AAQI,MAAA,QAAQ,EAAEI,YARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,EAgBI;AACI,MAAA,IAAI,EAAC,UADT;AAEI,MAAA,YAAY,EAAC,kBAFjB;AAGI,MAAA,IAAI,EAAC,UAHT;AAII,MAAA,WAAW,EAAC,UAJhB,CAKI;AACA;AANJ;AAOI,MAAA,KAAK,EAAEF,IAAI,CAACD,QAPhB;AAQI,MAAA,QAAQ,EAAEG,YARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBJ,EA0BI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA1BJ;AAHJ;AAgCH;;AAEL,eAAeR,MAAf","sourcesContent":["// #11 Import useState\r\nimport React, { useState } from \"react\"\r\n// #24 Instead of importing axios, we'll import api, axios can be removed\r\nimport api from \"../utils/api\";\r\n\r\n// #6 Create Signin Component\r\nfunction Signin(props) {\r\n    // #20 Set up error state for error component/message\r\n    const [error, setError] = useState()\r\n\r\n    // #12 Set up some initial state\r\n    const [data, setData] = useState({\r\n        username: \"\",\r\n        password: \"\",\r\n    })\r\n\r\n    // #13 Create handleChange function for the inputs\r\n    const handleChange = (event) => {\r\n        // #14 set new state\r\n        setData({ // #15 Pass a new object\r\n            // #16 make object IMMUTABLE by spreading the data\r\n            ...data, \r\n            // #17 Pass in new value\r\n            [event.target.name]: event.target.value,\r\n        })\r\n    }\r\n\r\n    // #22 We need a handle submit function for our button.\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        // #23 We need to make an axios call. \r\n        //     Instead of calling axios post, we'll use api as a function in place of axios\r\n                // We are using are axios instance with predefined values,\r\n                // rather than just plain old axios\r\n        api()\r\n            .post(\"/login\", data)\r\n            .then(result => {\r\n                // #26 Store our new token in local storage so it persists\r\n                localStorage.setItem(\"token\", result.data.token)\r\n                // #57 Redirect the user to their account page after logging in\r\n                props.history.push(\"/account\")\r\n            })\r\n            .catch(err => {\r\n                setError(err.response.data.message)\r\n            })\r\n        }\r\n\r\n        return (\r\n            // #9 Return a form tag\r\n            // #25 Don't forget to add handleSubmit to the form!\r\n            <form onSubmit={handleSubmit}>\r\n                {/* #21 Inside the component, we can write a simple ternary that says\r\n                if error exists or something is in there that is undefined, show\r\n                a div with className of error, and display the error */}\r\n                {error && <div className=\"error\">{error}</div>}\r\n    \r\n                {/* #10 Create some input fields and a button for the form */}\r\n                <input \r\n                    type=\"text\" \r\n                    autoComplete=\"username\" \r\n                    name=\"username\" \r\n                    placeholder=\"Username\" \r\n                    // #18A Attach these values and the handleChange function to \r\n                    //    each one of our inputs\r\n                    value={data.username} \r\n                    onChange={handleChange} />\r\n                <input \r\n                    type=\"password\" \r\n                    autoComplete=\"current-password\" \r\n                    name=\"password\" \r\n                    placeholder=\"Password\" \r\n                    // #18B Attach these values and the handleChange function to \r\n                    //    each one of our inputs\r\n                    value={data.password} \r\n                    onChange={handleChange} />\r\n    \r\n                <button type=\"submit\">Sign In</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\nexport default Signin;"]},"metadata":{},"sourceType":"module"}